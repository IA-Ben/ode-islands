Verify Video Pipeline & CMS Upload Completion
Objective
Confirm that all video pipeline components are properly integrated and the CMS upload workflow is fully functional from upload through playback.

Quick Verification Checklist
1. Infrastructure Check (2 minutes)
bash
# Verify Cloud Run is deployed with correct specs
gcloud run services describe video-transcoder --region=us-central1 --format="value(spec.template.spec.containers[0].resources)"
# Should show: limits={'cpu': '4', 'memory': '16Gi'}

# Check GCS buckets exist and have correct structure
gsutil ls gs://ode-islands-video-input/
# Should show: pending/ processing/ completed/ failed/

gsutil ls gs://ode-islands-video-cdn/
# Should show: videos/

# Verify API endpoint is live
curl -I https://your-domain.com/api/cms/media/upload
# Should return: 401 (auth required) or 405 (method not allowed for GET)
2. CMS Upload Test (5 minutes)
Step A: Access CMS Upload Page
bash
# Navigate to CMS media uploader (must be logged in as admin)
open http://localhost:3000/cms/media-uploader
# OR wherever MediaUploader component is mounted
Step B: Upload Test Video
Select a test video file (use a 30-second MP4, ~10-50MB)
Click upload button
Verify you see:
‚úÖ Upload progress bar (0% ‚Üí 100%)
‚úÖ Status changes: "uploading" ‚Üí "processing"
‚úÖ No infinite spinner if error occurs
‚úÖ Clear error message if something fails
Step C: Monitor Processing
javascript
// In browser console, check the status polling
// Should see network requests to /api/cms/media/upload/[videoId]
// Monitor for 2-3 minutes until status shows "completed"
3. Verify Transcoding Output (2 minutes)
Once video shows "completed" status, verify all quality levels were created:

bash
# Get the video ID from the upload response
VIDEO_ID="[your-video-id-here]"

# Check master playlist exists and contains all qualities
curl https://storage.googleapis.com/ode-islands-video-cdn/videos/${VIDEO_ID}/manifest/master.m3u8

# Should contain these quality levels:
# 144p, 240p, 360p, 480p, 540p, 720p, 1080p 
# (higher resolutions only if source supports them)

# Verify at least one segment exists for each quality
gsutil ls gs://ode-islands-video-cdn/videos/${VIDEO_ID}/480p/ | head -5
# Should show: playlist.m3u8, segment_000.ts, segment_001.ts, etc.
4. Playback Verification (3 minutes)
Test Video Playback:
javascript
// Navigate to video player page
window.location.href = `/video/${VIDEO_ID}`;

// Or construct test URL directly:
const testUrl = `https://storage.googleapis.com/ode-islands-video-cdn/videos/${VIDEO_ID}/manifest/master.m3u8`;

// In console, verify HLS is working:
const video = document.querySelector('video');
console.log('Video ready state:', video.readyState); // Should be 3 or 4
console.log('Duration:', video.duration); // Should match your video
console.log('Buffered:', video.buffered.end(0)); // Should show buffered seconds
Monitor Buffer Cleanup:
javascript
// Let video play for 2.5 minutes to trigger cleanup
// In console, look for these logs:
// "Removing back buffer: 0s to Xs"
// "Back buffer removed via bufferController"
// "Dynamic buffer config: {backBuffer: X, maxBuffer: Y}"
5. Error Handling Verification (2 minutes)
Test Error Scenarios:
bash
# Test 1: Upload oversized file (>2GB)
# Should see immediate client-side error

# Test 2: Upload non-video file (.txt, .pdf)
# Should see "Invalid file type" error

# Test 3: Simulate server error
# Temporarily modify API to return 500 error
# Should see error message, NOT infinite spinner
6. Performance Validation (2 minutes)
Check parallel transcoding is working:

bash
# View Cloud Run logs during transcoding
gcloud logging read \
  "resource.type=cloud_run_revision AND textPayload=~'Generating.*quality variants'" \
  --limit=10 --format=json | jq -r '.textPayload'

# Should see messages like:
# "Generating 11 quality variants in parallel..."
# "‚úÖ Generated 11/11 variants"
# Processing time should be ~25-45s for 30s video (not 5+ minutes)
Quick Success Verification Script
Save and run this script for automated verification:

bash
#!/bin/bash
# verify_pipeline.sh

echo "üé¨ Video Pipeline Verification"
echo "=============================="

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

# Function to check condition
check() {
  if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ $1${NC}"
    return 0
  else
    echo -e "${RED}‚ùå $1${NC}"
    return 1
  fi
}

# 1. Check Cloud Run
echo -n "1. Cloud Run deployed: "
gcloud run services describe video-transcoder --region=us-central1 &>/dev/null
check "Cloud Run service exists"

# 2. Check GCS buckets
echo -n "2. Input bucket: "
gsutil ls gs://ode-islands-video-input/ &>/dev/null
check "Input bucket exists"

echo -n "3. CDN bucket: "
gsutil ls gs://ode-islands-video-cdn/ &>/dev/null
check "CDN bucket exists"

# 4. Check API endpoint
echo -n "4. Upload API: "
curl -f -I http://localhost:3000/api/cms/media/upload 2>/dev/null | grep -q "401\|405"
check "Upload API responds"

# 5. Test upload (requires admin token)
if [ ! -z "$ADMIN_TOKEN" ]; then
  echo "5. Testing upload flow..."
  
  # Upload test file
  RESPONSE=$(curl -s -X POST http://localhost:3000/api/cms/media/upload \
    -H "Authorization: Bearer $ADMIN_TOKEN" \
    -F "file=@test_videos/sample_30s.mp4" \
    -F 'metadata={"title":"Verification Test"}')
  
  VIDEO_ID=$(echo $RESPONSE | jq -r '.videoId')
  
  if [ "$VIDEO_ID" != "null" ]; then
    echo -e "${GREEN}‚úÖ Upload successful - Video ID: $VIDEO_ID${NC}"
    
    # Wait for processing
    echo "   Waiting for transcoding..."
    sleep 60
    
    # Check if master playlist exists
    gsutil ls gs://ode-islands-video-cdn/videos/$VIDEO_ID/manifest/master.m3u8 &>/dev/null
    check "Master playlist created"
    
    # Count quality levels
    QUALITIES=$(gsutil ls gs://ode-islands-video-cdn/videos/$VIDEO_ID/ | grep -c "p/$")
    echo -e "${GREEN}‚úÖ Generated $QUALITIES quality levels${NC}"
  else
    echo -e "${RED}‚ùå Upload failed${NC}"
  fi
else
  echo "5. Skipping upload test (set ADMIN_TOKEN to enable)"
fi

echo ""
echo "=============================="
echo "Verification Complete!"
echo "=============================="
echo ""
echo "Manual checks still needed:"
echo "1. ‚è±Ô∏è  Play video for 3 minutes and verify buffer cleanup in console"
echo "2. üîç  Check MediaUploader UI shows proper error messages"
echo "3. üìä  Verify parallel transcoding in Cloud Run logs"
Expected Results
‚úÖ Infrastructure:

Cloud Run: 4 vCPU, 16GB RAM
GCS buckets: Properly structured
API: Returns appropriate auth errors
‚úÖ Upload Flow:

Upload progress visible
Status transitions properly
Errors display clearly (no infinite spinners)
‚úÖ Transcoding:

Completes in < 1 minute for 30s video
Generates 7-11 quality levels
Parallel processing evident in logs
‚úÖ Playback:

Video loads and plays
Buffer cleanup triggers after 2-3 minutes
Memory remains stable
‚úÖ Error Handling:

File size limits enforced
Invalid types rejected
Server errors shown to user
Quick Troubleshooting
If verification fails:

bash
# Check Cloud Run logs for errors
gcloud logging read "severity=ERROR" --limit=20

# Check if transcoder is processing
gsutil ls gs://ode-islands-video-input/processing/

# Check for stuck jobs
gsutil ls gs://ode-islands-video-input/failed/

# Verify Cloud Run can access GCS
gcloud run services describe video-transcoder \
  --format="value(spec.template.spec.serviceAccountName)"
Confirmation
Once all checks pass, your video pipeline is ready for production! The system should handle:

‚úÖ CMS uploads with progress tracking
‚úÖ Parallel transcoding (75% faster)
‚úÖ Smart buffer management (no memory leaks)
‚úÖ Proper error handling (all failures surface to UI)
‚úÖ 11 adaptive quality levels
‚úÖ CDN delivery with HLS streaming
Run this verification to confirm everything is working end-to-end!





