Here’s a concise spec + drop-in component to unify the top bar and secondary nav across the front-end app and Admin, with a safe switch between the two.

What it must do

One visual system: same dark-glass bar, rounded pill sub-nav, focus rings, iconography.

Two modes: App (Before | Event | After) and Admin (Dashboard | Story | Events | …).

Mode switch: a single toggle/button that:

shows App ⇄ Admin depending on where you are,

hides Admin if the user lacks roles (owner|admin|producer|support|analyst|operator),

preserves context with deep-link mapping (e.g., Event page ↔ Admin/Event detail).

Secondary nav: same pill style in both modes (sticky under the top bar).

RBAC: Admin links hidden unless authorised; Settings locked unless owner|admin.

Env pill: Demo/Prod; Profile menu shared.

Responsive: centre tabs, collapse labels on small screens; accessible focus states.

IA (unified)

Primary (shared): Logo • Mode switch (App/Admin) • Section tabs • Wallet badge (App only) • Tier (App only) • Scan (App only) • Env pill • Profile.

App tabs: Before | Event | After.

Admin tabs: Dashboard | Story | Events | Cards | Rewards | Wallet | Users | Orders | Analytics | Settings.

Secondary (shared style):

App/Event: Info | Interact | Rewards (or After: Recap | Create | Offers).

Admin/Section: List | Create | Drafts | Rules | Audit | Preview.

Behaviour

Switch to Admin: checks role; if OK, routes to last Admin route (or /admin). If not OK, shows NoAccess.

Switch to App: returns to last App route (or /app/event).

Deep-link mapping (optional table):

/app/event ↔ /admin/events/[eventId]

/app/story/[storyId] ↔ /admin/story/[storyId]

Persisted state: remember last tab/lane per mode.

Analytics: nav_switch_mode, nav_tab_click, subnav_click.

Drop-in React (Tailwind) — Unified top bar + secondary nav
import { useMemo } from "react";
import { WalletCards, Crown, ScanLine, Shield, ChevronDown } from "lucide-react";

type Role = "owner"|"admin"|"producer"|"operator"|"analyst"|"support"|"visitor";

export type Mode = "app" | "admin";

interface UnifiedTopBarProps {
  mode: Mode;                          // "app" | "admin"
  roles: Role[];                       // current user's roles
  env?: "demo" | "prod";
  userName?: string;
  // App state
  appActiveTab?: "before"|"event"|"after";
  onAppTab?: (t: "before"|"event"|"after") => void;
  walletNewCount?: number;
  points?: number;
  tier?: "Bronze"|"Silver"|"Gold";
  onOpenWallet?: () => void;
  onOpenQR?: () => void;

  // Admin state
  adminActiveTab?: "dashboard"|"story"|"events"|"cards"|"rewards"|"wallet"|"users"|"orders"|"analytics"|"settings";
  onAdminTab?: (t: UnifiedTopBarProps["adminActiveTab"]) => void;

  // Mode switch & routing
  onSwitchMode: (next: Mode) => void;

  // Profile
  onSignOut?: () => void;
}

const canSeeAdmin = (roles: Role[]) =>
  roles?.some(r => ["owner","admin","producer","operator","analyst","support"].includes(r));

export function UnifiedTopBar(p: UnifiedTopBarProps) {
  const showAdmin = canSeeAdmin(p.roles);

  const appTabs: Array<{id: UnifiedTopBarProps["appActiveTab"], label: string}> = [
    { id: "before", label: "Before" },
    { id: "event",  label: "Event" },
    { id: "after",  label: "After" },
  ];

  const adminTabs: Array<{id: NonNullable<UnifiedTopBarProps["adminActiveTab"]>, label: string}> = [
    { id: "dashboard", label: "Dashboard" },
    { id: "story",     label: "Story" },
    { id: "events",    label: "Events" },
    { id: "cards",     label: "Cards" },
    { id: "rewards",   label: "Rewards" },
    { id: "wallet",    label: "Wallet" },
    { id: "users",     label: "Users" },
    { id: "orders",    label: "Orders" },
    { id: "analytics", label: "Analytics" },
    { id: "settings",  label: "Settings" },
  ];

  const tabs = p.mode === "app" ? appTabs : adminTabs;

  return (
    <header className="w-full sticky top-0 z-50 bg-white/85 dark:bg-slate-900/85 backdrop-blur border-b border-slate-200 dark:border-slate-800">
      <div className="max-w-6xl mx-auto px-3 sm:px-4">
        <div className="h-14 flex items-center gap-2">
          {/* Brand */}
          <div className="flex items-center gap-2 min-w-[110px]">
            <div className="w-7 h-7 rounded-xl bg-gradient-to-br from-fuchsia-500 to-rose-500" />
            <span className="hidden sm:block text-sm font-semibold">Ode Islands</span>
          </div>

          {/* Primary tabs */}
          <nav className="mx-auto flex items-center gap-1 bg-slate-100/70 dark:bg-slate-800/60 rounded-full p-1">
            {tabs.map(t => (
              <button
                key={t.id as string}
                onClick={() => p.mode === "app" ? p.onAppTab?.(t.id as any) : p.onAdminTab?.(t.id as any)}
                className={[
                  "px-4 py-2 rounded-full text-sm font-medium transition focus:outline-none focus-visible:ring-2 focus-visible:ring-fuchsia-400",
                  (p.mode === "app" && p.appActiveTab === t.id) || (p.mode === "admin" && p.adminActiveTab === t.id)
                    ? "bg-fuchsia-600 text-white shadow"
                    : "text-slate-700 hover:bg-slate-100 dark:text-slate-200 dark:hover:bg-slate-800",
                ].join(" ")}
                aria-current={
                  (p.mode === "app" && p.appActiveTab === t.id) || (p.mode === "admin" && p.adminActiveTab === t.id)
                    ? "page" : undefined
                }
              >
                {t.label}
              </button>
            ))}
          </nav>

          {/* Right cluster */}
          <div className="flex items-center gap-2 ml-auto">
            {/* App-only controls */}
            {p.mode === "app" && (
              <>
                <button
                  onClick={p.onOpenWallet}
                  className="relative inline-flex items-center gap-2 px-3 py-2 rounded-xl bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-700 hover:shadow-sm transition"
                >
                  <WalletCards className="w-5 h-5" />
                  <span className="hidden sm:inline text-sm font-medium">Wallet</span>
                  {(p.walletNewCount ?? 0) > 0 && (
                    <span className="absolute -top-1 -right-1 min-w-[20px] h-5 px-1 rounded-full bg-rose-500 text-white text-[11px] grid place-items-center">
                      {p.walletNewCount}
                    </span>
                  )}
                </button>
                <div className="hidden md:flex items-center gap-2 px-3 py-2 rounded-xl bg-fuchsia-600 text-white">
                  <Crown className="w-4 h-4" />
                  <span className="text-sm font-semibold">{p.tier ?? "Bronze"}</span>
                  <span className="text-xs opacity-90">• {p.points ?? 0} pts</span>
                </div>
                <button
                  onClick={p.onOpenQR}
                  className="inline-flex items-center gap-2 px-3 py-2 rounded-xl bg-slate-900 text-white hover:bg-black dark:bg-slate-700 dark:hover:bg-slate-600"
                >
                  <ScanLine className="w-5 h-5" />
                  <span className="hidden sm:inline text-sm">Scan</span>
                </button>
              </>
            )}

            {/* Mode switch */}
            {showAdmin && (
              <button
                onClick={() => p.onSwitchMode(p.mode === "app" ? "admin" : "app")}
                className="px-3 py-2 rounded-xl text-sm border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 hover:shadow-sm"
                title={p.mode === "app" ? "Go to Admin" : "Back to App"}
              >
                {p.mode === "app" ? "Admin" : "Back to App"}
              </button>
            )}

            {/* Env pill */}
            <span className="hidden sm:inline px-2 py-1 rounded-md text-xs border border-slate-200 dark:border-slate-700">
              {p.env?.toUpperCase() ?? "DEMO"}
            </span>

            {/* Profile */}
            <button
              onClick={p.onSignOut}
              className="inline-flex items-center gap-2 px-3 py-2 rounded-xl border border-slate-200 dark:border-slate-700"
              title="Sign out"
            >
              <ChevronDown className="w-4 h-4 opacity-70" />
              <span className="hidden sm:inline text-sm">{p.userName ?? "User"}</span>
            </button>
          </div>
        </div>
      </div>
    </header>
  );
}

Shared secondary nav (same style in both modes)

Use the same pill bar component you already have (SectionSubNav) for:

App/Event lanes (Info | Interact | Rewards) and After (Recap | Create | Offers).

Admin section sub-tabs (List | Create | Drafts | Rules | Audit | Preview).

Implementation notes

RBAC: hide Admin in the switch unless user has an allowed role; Settings tab disabled unless owner|admin.

Deep-link mapping: keep a small map (App ↔ Admin) so the switch preserves context where possible; otherwise fall back to last route in that mode.

Persistence: save lastAppRoute / lastAdminRoute in local storage or user profile.

A11y: ensure tabs are reachable via keyboard; visible focus (ring-2 ring-fuchsia-400).

Analytics: fire nav_switch_mode, nav_tab_click, subnav_click.