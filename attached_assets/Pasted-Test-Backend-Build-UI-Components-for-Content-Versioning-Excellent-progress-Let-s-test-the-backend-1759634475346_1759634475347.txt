Test Backend & Build UI Components for Content Versioning
Excellent progress! Let's test the backend first, then build the UI components.
Phase 1: Backend Testing Script
1.1 Test Versioning API
javascript// test/versioning-api.test.js
async function testVersioningAPI() {
  console.log('üß™ Testing Content Versioning API...\n');
  
  const baseUrl = 'http://localhost:3001/api/cms/versions';
  const testChapterId = 'test_chapter_' + Date.now();
  
  // Helper function for API calls
  async function apiCall(url, options = {}) {
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_ADMIN_TOKEN', // Replace with actual token
        ...options.headers
      }
    });
    return {
      status: response.status,
      data: await response.json()
    };
  }
  
  // Test 1: Create initial version
  console.log('üìù Test 1: Creating initial content...');
  const initialContent = {
    id: testChapterId,
    title: 'Original Title',
    content: { narrative: 'This is the original story content.' },
    status: 'draft'
  };
  
  // Simulate saving content (which should trigger versioning)
  const saveResult = await apiCall('/api/chapters', {
    method: 'POST',
    body: JSON.stringify(initialContent)
  });
  console.log('Initial save:', saveResult.status === 200 ? '‚úÖ' : '‚ùå');
  
  // Test 2: Get version history
  console.log('\nüìö Test 2: Fetching version history...');
  const historyResult = await apiCall(`${baseUrl}/chapter/${testChapterId}`);
  console.log('Version history:', historyResult.data);
  console.log('History retrieved:', historyResult.data.versions?.length > 0 ? '‚úÖ' : '‚ùå');
  
  // Test 3: Make changes and create new version
  console.log('\n‚úèÔ∏è Test 3: Creating new version...');
  const updatedContent = {
    ...initialContent,
    title: 'Updated Title',
    content: { narrative: 'This is the updated story content with changes.' },
    status: 'published'
  };
  
  await apiCall(`/api/chapters/${testChapterId}`, {
    method: 'PUT',
    body: JSON.stringify(updatedContent)
  });
  
  const newHistory = await apiCall(`${baseUrl}/chapter/${testChapterId}`);
  console.log('New versions:', newHistory.data.versions?.length);
  console.log('Version created:', newHistory.data.versions?.length > 1 ? '‚úÖ' : '‚ùå');
  
  // Test 4: Compare versions
  console.log('\nüîç Test 4: Comparing versions...');
  if (newHistory.data.versions?.length >= 2) {
    const v1 = newHistory.data.versions[0].versionNumber;
    const v2 = newHistory.data.versions[1].versionNumber;
    
    const compareResult = await apiCall(
      `${baseUrl}/chapter/${testChapterId}/compare?v1=${v1}&v2=${v2}`
    );
    
    console.log('Comparison result:', compareResult.data);
    console.log('Fields changed:', compareResult.data.diff?.length || 0);
    console.log('Compare works:', compareResult.data.diff ? '‚úÖ' : '‚ùå');
  }
  
  // Test 5: Restore version
  console.log('\nüîÑ Test 5: Restoring previous version...');
  if (newHistory.data.versions?.length >= 2) {
    const versionToRestore = newHistory.data.versions[0].versionNumber;
    
    const restoreResult = await apiCall(
      `${baseUrl}/chapter/${testChapterId}/restore`,
      {
        method: 'POST',
        body: JSON.stringify({ versionNumber: versionToRestore })
      }
    );
    
    console.log('Restore result:', restoreResult.data);
    console.log('Restore successful:', restoreResult.data.success ? '‚úÖ' : '‚ùå');
    
    // Verify restoration
    const finalHistory = await apiCall(`${baseUrl}/chapter/${testChapterId}`);
    console.log('Total versions after restore:', finalHistory.data.versions?.length);
  }
  
  console.log('\n‚úÖ Versioning API tests complete!');
  return true;
}

// Run the test
testVersioningAPI().catch(console.error);
1.2 Load Testing Script
javascript// test/versioning-load.test.js
async function loadTestVersioning() {
  console.log('‚ö° Load testing versioning system...\n');
  
  const iterations = 50;
  const results = [];
  
  for (let i = 0; i < iterations; i++) {
    const startTime = Date.now();
    
    // Create content with version
    const content = {
      id: `load_test_${i}`,
      title: `Test Chapter ${i}`,
      content: { narrative: `Content iteration ${i}` }
    };
    
    await fetch('/api/chapters', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(content)
    });
    
    const duration = Date.now() - startTime;
    results.push(duration);
    
    if (i % 10 === 0) {
      console.log(`Progress: ${i}/${iterations} (${duration}ms)`);
    }
  }
  
  const avg = results.reduce((a, b) => a + b, 0) / results.length;
  const max = Math.max(...results);
  
  console.log(`\nüìä Results:
  - Average: ${avg.toFixed(2)}ms
  - Max: ${max}ms
  - Total: ${results.length} versions created`);
  
  return results;
}
Phase 2: UI Components Implementation
2.1 Version History Timeline
typescript// src/components/cms/versioning/VersionHistory.tsx
'use client';

import { useState, useEffect } from 'react';
import { format, formatDistanceToNow } from 'date-fns';

interface Version {
  id: string;
  versionNumber: number;
  content: any;
  createdBy?: string;
  createdAt: string;
  changeDescription?: string;
  metadata?: {
    fieldsChanged?: string[];
    sizeBytes?: number;
  };
}

export function VersionHistory({ 
  contentType, 
  contentId,
  onRestore,
  onCompare 
}: {
  contentType: string;
  contentId: string;
  onRestore?: (version: Version) => void;
  onCompare?: (v1: Version, v2: Version) => void;
}) {
  const [versions, setVersions] = useState<Version[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedVersions, setSelectedVersions] = useState<Version[]>([]);
  
  useEffect(() => {
    fetchVersionHistory();
  }, [contentType, contentId]);
  
  async function fetchVersionHistory() {
    try {
      const response = await fetch(`/api/cms/versions/${contentType}/${contentId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
        }
      });
      
      const data = await response.json();
      setVersions(data.versions || []);
    } catch (error) {
      console.error('Failed to fetch version history:', error);
    } finally {
      setLoading(false);
    }
  }
  
  function handleVersionSelect(version: Version) {
    if (selectedVersions.includes(version)) {
      setSelectedVersions(selectedVersions.filter(v => v.id !== version.id));
    } else if (selectedVersions.length < 2) {
      setSelectedVersions([...selectedVersions, version]);
    } else {
      // Replace oldest selection
      setSelectedVersions([selectedVersions[1], version]);
    }
  }
  
  if (loading) {
    return <div className="animate-pulse">Loading version history...</div>;
  }
  
  return (
    <div className="version-history">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold">Version History</h3>
        
        {selectedVersions.length === 2 && (
          <button
            onClick={() => onCompare?.(selectedVersions[0], selectedVersions[1])}
            className="btn btn-sm btn-outline"
          >
            Compare Selected
          </button>
        )}
      </div>
      
      {/* Timeline */}
      <div className="relative">
        {/* Vertical line */}
        <div className="absolute left-4 top-0 bottom-0 w-0.5 bg-gray-200"></div>
        
        {versions.map((version, index) => (
          <div key={version.id} className="relative flex items-start mb-6">
            {/* Timeline dot */}
            <div className={`
              absolute left-2.5 w-3 h-3 rounded-full border-2 
              ${index === 0 ? 'bg-blue-500 border-blue-500' : 'bg-white border-gray-300'}
            `}></div>
            
            {/* Version card */}
            <div className={`
              ml-10 flex-1 p-4 rounded-lg border cursor-pointer
              ${selectedVersions.includes(version) ? 'border-blue-500 bg-blue-50' : 'border-gray-200'}
              hover:shadow-md transition-shadow
            `}
              onClick={() => handleVersionSelect(version)}
            >
              <div className="flex justify-between items-start">
                <div>
                  <div className="flex items-center gap-2">
                    <span className="font-semibold">Version {version.versionNumber}</span>
                    {index === 0 && (
                      <span className="badge badge-sm badge-primary">Current</span>
                    )}
                  </div>
                  
                  <div className="text-sm text-gray-600 mt-1">
                    {format(new Date(version.createdAt), 'MMM d, yyyy h:mm a')}
                    {' ‚Ä¢ '}
                    {formatDistanceToNow(new Date(version.createdAt), { addSuffix: true })}
                  </div>
                  
                  {version.createdBy && (
                    <div className="text-sm text-gray-500 mt-1">
                      by {version.createdBy}
                    </div>
                  )}
                  
                  {version.changeDescription && (
                    <div className="text-sm mt-2 italic">
                      "{version.changeDescription}"
                    </div>
                  )}
                  
                  {version.metadata?.fieldsChanged && (
                    <div className="flex gap-1 mt-2">
                      {version.metadata.fieldsChanged.map(field => (
                        <span key={field} className="badge badge-sm">
                          {field}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
                
                <div className="flex gap-2">
                  {index !== 0 && (
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        onRestore?.(version);
                      }}
                      className="btn btn-sm btn-ghost"
                      title="Restore this version"
                    >
                      üîÑ
                    </button>
                  )}
                  
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      // Preview version
                      window.open(`/preview/${contentType}/${contentId}?version=${version.versionNumber}`);
                    }}
                    className="btn btn-sm btn-ghost"
                    title="Preview this version"
                  >
                    üëÅÔ∏è
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
      
      {versions.length === 0 && (
        <div className="text-center text-gray-500 py-8">
          No version history available
        </div>
      )}
    </div>
  );
}
2.2 Version Comparison View
typescript// src/components/cms/versioning/VersionComparison.tsx
import { useState, useEffect } from 'react';
import { diffLines, diffWords } from 'diff';

interface ComparisonData {
  version1: any;
  version2: any;
  diff: Array<{
    field: string;
    oldValue: any;
    newValue: any;
    type: 'added' | 'removed' | 'modified';
  }>;
}

export function VersionComparison({
  contentType,
  contentId,
  v1,
  v2,
  onClose
}: {
  contentType: string;
  contentId: string;
  v1: number;
  v2: number;
  onClose: () => void;
}) {
  const [comparison, setComparison] = useState<ComparisonData | null>(null);
  const [viewMode, setViewMode] = useState<'side-by-side' | 'inline'>('side-by-side');
  
  useEffect(() => {
    fetchComparison();
  }, [v1, v2]);
  
  async function fetchComparison() {
    const response = await fetch(
      `/api/cms/versions/${contentType}/${contentId}/compare?v1=${v1}&v2=${v2}`,
      {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
        }
      }
    );
    
    const data = await response.json();
    setComparison(data);
  }
  
  function renderFieldDiff(field: string, oldValue: any, newValue: any) {
    if (typeof oldValue === 'string' && typeof newValue === 'string') {
      const diff = diffWords(oldValue, newValue);
      
      return (
        <div className="diff-content">
          {diff.map((part, index) => (
            <span
              key={index}
              className={
                part.added ? 'bg-green-200' :
                part.removed ? 'bg-red-200 line-through' :
                ''
              }
            >
              {part.value}
            </span>
          ))}
        </div>
      );
    }
    
    // For non-string values, show JSON diff
    return (
      <div className="grid grid-cols-2 gap-4">
        <pre className="bg-red-50 p-2 rounded text-xs">
          {JSON.stringify(oldValue, null, 2)}
        </pre>
        <pre className="bg-green-50 p-2 rounded text-xs">
          {JSON.stringify(newValue, null, 2)}
        </pre>
      </div>
    );
  }
  
  if (!comparison) {
    return <div>Loading comparison...</div>;
  }
  
  return (
    <div className="version-comparison">
      <div className="sticky top-0 bg-white border-b p-4 z-10">
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-semibold">
            Comparing Version {v1} ‚Üí Version {v2}
          </h3>
          
          <div className="flex gap-2">
            <select
              value={viewMode}
              onChange={(e) => setViewMode(e.target.value as any)}
              className="select select-sm"
            >
              <option value="side-by-side">Side by Side</option>
              <option value="inline">Inline</option>
            </select>
            
            <button onClick={onClose} className="btn btn-sm">
              Close
            </button>
          </div>
        </div>
      </div>
      
      <div className="p-4">
        {comparison.diff.map((change, index) => (
          <div key={index} className="mb-6 border rounded-lg p-4">
            <div className="flex items-center gap-2 mb-3">
              <span className="font-semibold">{change.field}</span>
              <span className={`badge badge-sm ${
                change.type === 'added' ? 'badge-success' :
                change.type === 'removed' ? 'badge-error' :
                'badge-warning'
              }`}>
                {change.type}
              </span>
            </div>
            
            {renderFieldDiff(change.field, change.oldValue, change.newValue)}
          </div>
        ))}
      </div>
    </div>
  );
}
2.3 Integration with CMS Editor
typescript// src/components/cms/ChapterEditor.tsx (enhancement)
import { VersionHistory } from './versioning/VersionHistory';
import { VersionComparison } from './versioning/VersionComparison';

export function EnhancedChapterEditor({ chapter, onSave }) {
  const [showVersionHistory, setShowVersionHistory] = useState(false);
  const [compareVersions, setCompareVersions] = useState(null);
  const [autoSave, setAutoSave] = useState(true);
  
  // Auto-save with versioning
  useEffect(() => {
    if (!autoSave) return;
    
    const timer = setTimeout(() => {
      saveWithVersion('Auto-save');
    }, 30000); // Auto-save every 30 seconds
    
    return () => clearTimeout(timer);
  }, [chapter, autoSave]);
  
  async function saveWithVersion(description?: string) {
    // Save creates a new version automatically via API
    await onSave({
      ...chapter,
      _versionMetadata: {
        changeDescription: description || 'Manual save',
        createdBy: getCurrentUser()
      }
    });
  }
  
  async function handleRestore(version) {
    if (!confirm(`Restore to Version ${version.versionNumber}? Current changes will be saved as a new version.`)) {
      return;
    }
    
    // Save current state first
    await saveWithVersion('Before restore');
    
    // Restore selected version
    const response = await fetch(
      `/api/cms/versions/chapter/${chapter.id}/restore`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
        },
        body: JSON.stringify({ 
          versionNumber: version.versionNumber,
          reason: `Restored from Version ${version.versionNumber}`
        })
      }
    );
    
    if (response.ok) {
      // Reload chapter
      window.location.reload();
    }
  }
  
  return (
    <div className="enhanced-chapter-editor">
      {/* Top toolbar */}
      <div className="toolbar flex justify-between items-center p-4 border-b">
        <div className="flex gap-2">
          <button onClick={() => saveWithVersion()} className="btn btn-primary">
            Save Version
          </button>
          
          <button 
            onClick={() => setShowVersionHistory(!showVersionHistory)}
            className="btn btn-outline"
          >
            üìú History
          </button>
          
          <div className="flex items-center gap-2">
            <input
              type="checkbox"
              id="autosave"
              checked={autoSave}
              onChange={(e) => setAutoSave(e.target.checked)}
            />
            <label htmlFor="autosave">Auto-save</label>
          </div>
        </div>
        
        <div className="text-sm text-gray-500">
          Last saved: {chapter.updatedAt ? formatDistanceToNow(new Date(chapter.updatedAt)) : 'Never'}
        </div>
      </div>
      
      <div className="grid grid-cols-12 gap-4 p-4">
        {/* Main editor */}
        <div className={showVersionHistory ? 'col-span-8' : 'col-span-12'}>
          {/* Your existing editor content */}
        </div>
        
        {/* Version history sidebar */}
        {showVersionHistory && (
          <div className="col-span-4 border-l pl-4">
            <VersionHistory
              contentType="chapter"
              contentId={chapter.id}
              onRestore={handleRestore}
              onCompare={(v1, v2) => setCompareVersions({ v1, v2 })}
            />
          </div>
        )}
      </div>
      
      {/* Version comparison modal */}
      {compareVersions && (
        <Modal isOpen onClose={() => setCompareVersions(null)}>
          <VersionComparison
            contentType="chapter"
            contentId={chapter.id}
            v1={compareVersions.v1.versionNumber}
            v2={compareVersions.v2.versionNumber}
            onClose={() => setCompareVersions(null)}
          />
        </Modal>
      )}
    </div>
  );
}
Phase 3: Quick Integration Test
javascript// Quick test in browser console
async function quickVersionTest() {
  // Create test content
  const testContent = {
    id: 'quick_test_' + Date.now(),
    title: 'Version Test',
    content: { narrative: 'Original content' }
  };
  
  // Save v1
  await fetch('/api/chapters', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(testContent)
  });
  
  // Update to v2
  testContent.content.narrative = 'Updated content';
  await fetch(`/api/chapters/${testContent.id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(testContent)
  });
  
  // Check versions
  const versions = await fetch(`/api/cms/versions/chapter/${testContent.id}`)
    .then(r => r.json());
  
  console.log('‚úÖ Versions created:', versions.versions?.length || 0);
  
  return versions;
}

quickVersionTest();