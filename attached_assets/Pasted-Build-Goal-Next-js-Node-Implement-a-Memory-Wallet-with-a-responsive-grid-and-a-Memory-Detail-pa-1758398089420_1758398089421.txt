Build Goal (Next.js + Node):
Implement a Memory Wallet with a responsive grid and a Memory Detail page. All data loads from the CMS. Each memory has owned/not-owned states, an image, and metadata shown on the detail page. Tapping a memory opens its detail only if owned.

Tech/Files (suggested):

app/after/wallet/page.tsx — Wallet grid

app/after/memory/[id]/page.tsx — Memory detail

lib/cms.ts — fetchers (getWallet(), getMemory(id))

types/memory.ts — TS types

components/MemoryCard.tsx, components/ProgressCapsule.tsx

CMS Contract (you implement fetchers, mock if needed):

GET /api/cms/wallet → { totalSlots: number, items: MemorySummary[] }

GET /api/cms/memory/:id → MemoryDetail

Type Model (use this):

MemorySummary: id, title, thumbnailUrl, owned (bool), type (stamp|sticker|photo|ar), rarity (common|rare|legendary)

MemoryDetail: id, title, heroUrl, description, chapterTitle, subChapterTitle, collectedAt (ISO|null), type, rarity, points (number), tags (string[]), source (e.g. "QR Act I"), unlockRule (string), shareUrl, arItemId (optional), credits (artist/photographer), alt (string), license (string)

Wallet UX (page):

Header: “Memory Wallet”, progress capsule (“X of Y collected”).

Grid: responsive (min 3 columns mobile, 4–6 tablet/desktop).

Owned: show thumbnail, title, rarity pill. Tap → navigate to detail.

Not-owned: show grey silhouette + “Locked” label; tap → open small sheet with How to unlock (uses unlockRule).

States: loading skeletons; error state with retry; empty (0/ Y) state with CTA (“See how to collect”).

A11y: alt text from alt; focus ring; 44px targets.

Perf: Next/Image, lazy loading, skeleton shimmer.

Detail UX (page):

Hero image/video (heroUrl), title, rarity, points.

Meta section: description, chapter/subchapter, collectedAt (friendly date), tags, source, credits, license.

Actions: Share (uses shareUrl), (optional) “Replay AR” if arItemId.

Guard: if user hits a detail route for non-owned memory → show locked view with unlock instructions + back to Wallet.

A11y: captions/transcripts for video, alt text for hero.

Interactions:

When a new memory is awarded elsewhere, implement a simple animateToWallet() helper (fade/scale then toast: “Added: {title}”).

Wallet progress updates live from CMS response (no client math).

Acceptance Criteria:

 Grid renders from CMS; no hardcoded titles/images.

 Owned vs not-owned visuals & behaviour implemented.

 Tapping owned → detail; tapping locked → unlock sheet.

 Detail shows full metadata listed above.

 All states covered: loading, error, empty.

 Typescript strict; no any.

 Lighthouse mobile performance ≥ 85; a11y ≥ 90.

Testing (light):

Add MSW or simple mock JSON for CMS during dev; include at least 12 items with a mix of owned/not-owned and types/rarities.

Unit test MemoryCard click behaviour and locked guard on detail.

Notes:

Keep styling minimal, modern, and consistent with the app (black cards, white bg, green progress).

Make routes easy to swap if project uses /pages instead of /app.