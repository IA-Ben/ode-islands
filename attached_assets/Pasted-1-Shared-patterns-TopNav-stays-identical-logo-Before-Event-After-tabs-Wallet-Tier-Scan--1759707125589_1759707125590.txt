1) Shared patterns

TopNav stays identical (logo • Before/Event/After tabs • Wallet • Tier • Scan • Admin • Profile).

Each section gets a sticky sub-nav with the same visual language: rounded pills, compact, dark-glass background, clear focus rings.

2) Reusable sub-nav (drop-in)
// SectionSubNav.tsx
import { Map, Info, Sparkles, Gift, Camera, Wand2 } from "lucide-react";

type Item = {
  id: string;
  label: string;
  icon?: React.ComponentType<any>;
};

export function SectionSubNav({
  items,
  activeId,
  onChange,
  rightSlot, // optional: extra actions (e.g., Map, Share)
}: {
  items: Item[];
  activeId: string;
  onChange: (id: string) => void;
  rightSlot?: React.ReactNode;
}) {
  const base =
    "px-3 sm:px-4 h-9 rounded-full text-sm font-medium transition focus:outline-none focus-visible:ring-2 focus-visible:ring-fuchsia-400";
  const active = "bg-fuchsia-600 text-white shadow";
  const idle =
    "text-slate-200/90 hover:bg-white/10";

  return (
    <div className="sticky top-14 z-30 bg-slate-900/70 backdrop-blur border-b border-white/10">
      <div className="max-w-6xl mx-auto px-3 sm:px-4 py-2 flex items-center gap-2">
        <nav className="flex items-center gap-1 bg-white/5 rounded-full p-1">
          {items.map(({ id, label, icon: Icon }) => (
            <button
              key={id}
              onClick={() => onChange(id)}
              className={`${base} ${activeId === id ? active : idle}`}
              aria-current={activeId === id ? "page" : undefined}
            >
              <span className="inline-flex items-center gap-2">
                {Icon && <Icon className="w-4 h-4" />}
                {label}
              </span>
            </button>
          ))}
        </nav>
        <div className="ml-auto flex items-center gap-2">
          {rightSlot}
        </div>
      </div>
    </div>
  );
}

3) Event header using the same style
// EventHeader.tsx
import { SectionSubNav } from "./SectionSubNav";
import { Map, QrCode } from "lucide-react";

export function EventHeader({
  lane,
  setLane,
  onOpenMap,
  onQuickScan,
}: {
  lane: "info" | "interact" | "rewards";
  setLane: (v: "info" | "interact" | "rewards") => void;
  onOpenMap: () => void;
  onQuickScan: () => void;
}) {
  return (
    <SectionSubNav
      items={[
        { id: "info", label: "Info" },
        { id: "interact", label: "Interact" },
        { id: "rewards", label: "Rewards" },
      ]}
      activeId={lane}
      onChange={(id) => setLane(id as any)}
      rightSlot={
        <>
          <button
            onClick={onOpenMap}
            className="px-3 py-2 rounded-xl bg-white/10 text-white hover:bg-white/15"
          >
            <span className="inline-flex items-center gap-2"><Map className="w-4 h-4" /> Map</span>
          </button>
          <button
            onClick={onQuickScan}
            className="px-3 py-2 rounded-xl bg-slate-200 text-slate-900 hover:bg-white"
          >
            <span className="inline-flex items-center gap-2"><QrCode className="w-4 h-4" /> Scan</span>
          </button>
        </>
      }
    />
  );
}

4) After header mirroring Event
// AfterHeader.tsx
import { SectionSubNav } from "./SectionSubNav";
import { Share2, Sparkles, Gift } from "lucide-react";

export function AfterHeader({
  lane,
  setLane,
  openShareComposer,
}: {
  lane: "recap" | "create" | "offers";
  setLane: (v: "recap" | "create" | "offers") => void;
  openShareComposer: () => void;
}) {
  return (
    <SectionSubNav
      items={[
        { id: "recap", label: "Recap" },          // highlights, gallery, timeline
        { id: "create", label: "Create" },        // AI-assisted edits/exports
        { id: "offers", label: "Offers" },        // discounts, next shows
      ]}
      activeId={lane}
      onChange={(id) => setLane(id as any)}
      rightSlot={
        <button
          onClick={openShareComposer}
          className="px-3 py-2 rounded-xl bg-fuchsia-600 text-white hover:bg-fuchsia-500"
        >
          <span className="inline-flex items-center gap-2">
            <Share2 className="w-4 h-4" /> Share
          </span>
        </button>
      }
    />
  );
}

5) Consistent content layout
// SectionScaffold.tsx – keeps card rails consistent across Event/After
export function SectionScaffold({ children }: { children: React.ReactNode }) {
  return (
    <main className="max-w-6xl mx-auto px-3 sm:px-4 py-4">
      <div className="grid gap-3 sm:gap-4">
        {children}
      </div>
    </main>
  );
}

6) Usage example
// EventPage.tsx
import TopNav from "./TopNav";
import { EventHeader } from "./EventHeader";
import { SectionScaffold } from "./SectionScaffold";

export default function EventPage() {
  const [lane, setLane] = useState<"info"|"interact"|"rewards">("info");
  return (
    <>
      <TopNav /* …props… */ active="event" />
      <EventHeader lane={lane} setLane={setLane} onOpenMap={()=>{}} onQuickScan={()=>{}} />
      <SectionScaffold>
        {/* render cards based on lane */}
      </SectionScaffold>
    </>
  );
}

// AfterPage.tsx
export default function AfterPage() {
  const [lane, setLane] = useState<"recap"|"create"|"offers">("recap");
  return (
    <>
      <TopNav /* …props… */ active="after" />
      <AfterHeader lane={lane} setLane={setLane} openShareComposer={()=>{}} />
      <SectionScaffold>
        {/* recap/create/offers cards */}
      </SectionScaffold>
    </>
  );
}

7) Visual consistency notes

Same rounded pill buttons, same dark glass bar, same focus rings and motion (200ms).

On mobile, the sub-nav becomes a horizontal scroll pill row; the rightSlot collapses to icons.

Keep Wallet badge and Scan in the top bar; sub-nav only handles within-section lanes.

8) Microcopy (keep it uniform)

Event/Rewards pill: “Rewards”

After lanes: “Recap”, “Create”, “Offers”

Right-slot CTAs: “Map”, “Scan”, “Share”