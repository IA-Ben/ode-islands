// test/versioning-api.test.js
async function testVersioningAPI() {
  console.log('üß™ Testing Content Versioning API...\n');
  
  const baseUrl = 'http://localhost:3001/api/cms/versions';
  const testChapterId = 'test_chapter_' + Date.now();
  
  // Helper function for API calls
  async function apiCall(url, options = {}) {
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_ADMIN_TOKEN', // Replace with actual token
        ...options.headers
      }
    });
    return {
      status: response.status,
      data: await response.json()
    };
  }
  
  // Test 1: Create initial version
  console.log('üìù Test 1: Creating initial content...');
  const initialContent = {
    id: testChapterId,
    title: 'Original Title',
    content: { narrative: 'This is the original story content.' },
    status: 'draft'
  };
  
  // Simulate saving content (which should trigger versioning)
  const saveResult = await apiCall('/api/chapters', {
    method: 'POST',
    body: JSON.stringify(initialContent)
  });
  console.log('Initial save:', saveResult.status === 200 ? '‚úÖ' : '‚ùå');
  
  // Test 2: Get version history
  console.log('\nüìö Test 2: Fetching version history...');
  const historyResult = await apiCall(`${baseUrl}/chapter/${testChapterId}`);
  console.log('Version history:', historyResult.data);
  console.log('History retrieved:', historyResult.data.versions?.length > 0 ? '‚úÖ' : '‚ùå');
  
  // Test 3: Make changes and create new version
  console.log('\n‚úèÔ∏è Test 3: Creating new version...');
  const updatedContent = {
    ...initialContent,
    title: 'Updated Title',
    content: { narrative: 'This is the updated story content with changes.' },
    status: 'published'
  };
  
  await apiCall(`/api/chapters/${testChapterId}`, {
    method: 'PUT',
    body: JSON.stringify(updatedContent)
  });
  
  const newHistory = await apiCall(`${baseUrl}/chapter/${testChapterId}`);
  console.log('New versions:', newHistory.data.versions?.length);
  console.log('Version created:', newHistory.data.versions?.length > 1 ? '‚úÖ' : '‚ùå');
  
  // Test 4: Compare versions
  console.log('\nüîç Test 4: Comparing versions...');
  if (newHistory.data.versions?.length >= 2) {
    const v1 = newHistory.data.versions[0].versionNumber;
    const v2 = newHistory.data.versions[1].versionNumber;
    
    const compareResult = await apiCall(
      `${baseUrl}/chapter/${testChapterId}/compare?v1=${v1}&v2=${v2}`
    );
    
    console.log('Comparison result:', compareResult.data);
    console.log('Fields changed:', compareResult.data.diff?.length || 0);
    console.log('Compare works:', compareResult.data.diff ? '‚úÖ' : '‚ùå');
  }
  
  // Test 5: Restore version
  console.log('\nüîÑ Test 5: Restoring previous version...');
  if (newHistory.data.versions?.length >= 2) {
    const versionToRestore = newHistory.data.versions[0].versionNumber;
    
    const restoreResult = await apiCall(
      `${baseUrl}/chapter/${testChapterId}/restore`,
      {
        method: 'POST',
        body: JSON.stringify({ versionNumber: versionToRestore })
      }
    );
    
    console.log('Restore result:', restoreResult.data);
    console.log('Restore successful:', restoreResult.data.success ? '‚úÖ' : '‚ùå');
    
    // Verify restoration
    const finalHistory = await apiCall(`${baseUrl}/chapter/${testChapterId}`);
    console.log('Total versions after restore:', finalHistory.data.versions?.length);
  }
  
  console.log('\n‚úÖ Versioning API tests complete!');
  return true;
}

// Run the test
testVersioningAPI().catch(console.error);